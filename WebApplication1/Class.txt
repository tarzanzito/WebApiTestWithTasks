
//using Serilog;

namespace WebApplication1
{
    public class Program
    {
        public static void Main(string[] args)
        {
//            using var log = new LoggerConfiguration().WriteTo.File("App.log")
//            //.WriteTo.Console()
//            .CreateLogger();
//            Log.Logger = log;


            var builder = WebApplication.CreateBuilder(args);

            /// INI
            builder.Logging.ClearProviders();
            //builder.Logging.
            builder.Logging.AddSimpleConsole(options =>
            {
                options.IncludeScopes = true;
                options.SingleLine = true;
                options.TimestampFormat = "yyyy/MM/dd HH:mm:ss ";
            });

            builder..AddProvider(new CustomFileLoggerProvider("App.log"));
            //Log.Logger = new LoggerConfiguration()
            //    .MinimumLevel.Debug()
            //    .WriteTo.File("\"AppB.log", rollingInterval: RollingInterval.Day)
            //    .CreateLogger();
            /// END


            builder.Services.AddSingleton<IStatisticsInfo, StatisticsInfo>();

            builder.Services.AddControllers();
            
            builder.Services.AddEndpointsApiExplorer();

            builder.Services.AddSwaggerGen();

            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();

                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapControllers();

            app.Run();
        }
    }

    // Customized ILoggerProvider, writes logs to text files
    public class CustomFileLoggerProvider : ILoggerProvider
    {
        private readonly StreamWriter _logFileWriter;

        public CustomFileLoggerProvider(string fileName) 
        {
            _logFileWriter = new StreamWriter(fileName);
        }

        //public CustomFileLoggerProvider(StreamWriter logFileWriter)
        //{
        //    _logFileWriter = logFileWriter ?? throw new ArgumentNullException(nameof(logFileWriter));
        //}

        public ILogger CreateLogger(string categoryName)
        {
            return new CustomFileLogger(categoryName, _logFileWriter);
        }

        public void Dispose()
        {
            _logFileWriter.Dispose();
        }

        Microsoft.Extensions.Logging.ILogger ILoggerProvider.CreateLogger(string categoryName)
        {
            throw new NotImplementedException();
        }
    }

    // Customized ILogger, writes logs to text files
    public class CustomFileLogger : Microsoft.Extensions.Logging.ILogger
    {
        private readonly string _categoryName;
        private readonly StreamWriter _logFileWriter;

        public CustomFileLogger(string categoryName, StreamWriter logFileWriter)
        {
            _categoryName = categoryName;
            _logFileWriter = logFileWriter;
        }

        public IDisposable BeginScope<TState>(TState state)
        {
            return null;
        }

        public bool IsEnabled(LogLevel logLevel)
        {
            // Ensure that only information level and higher logs are recorded
            return logLevel >= LogLevel.Information;
        }

        public void Log<TState>(
            LogLevel logLevel,
            EventId eventId,
            TState state,
            Exception exception,
            Func<TState, Exception, string> formatter)
        {
            // Ensure that only information level and higher logs are recorded
            if (!IsEnabled(logLevel))
            {
                return;
            }

            // Get the formatted log message
            var message = formatter(state, exception);

            //Write log messages to text file
            _logFileWriter.WriteLine($"[{logLevel}] [{_categoryName}] {message}");
            _logFileWriter.Flush();
        }
    }

}
